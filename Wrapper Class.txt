
Wrapper class provides a way to use primitive data types as reference data types.
	reference data types contain useful methods
	can be used with collections. E.g ArrayList

In other words: Wrapper classes provide a way to use primitive data types as objects.
Sometimes you must use wrapper classes, E.g when working with Collection objects, such as ArrayList, where primitive
data types cannot be used (the list can only store objects)

//Primitive		//Wrapper

boolean			Boolean
char			Character
int			Integer
double			Double
....etc

NB: Primitive values are a lot faster than reference data types.


Autoboxing: It is the automatic conversion that the Java compiler makes between the primitive types and their corresponding object wrapper classes.
Unboxing:   It is the reverse of autoboxing. Automatic conversion of wrapper class to primitive.

E.g Boolean a = true;	<--- Autoboxing
    Character b = '@';
    Integer c = 6543;
    String d = "name";	\\String is already a reference data type

some methods associated with boolean wrapper class: a.equals(), a.compareTo(), a.toString() ...


Unboxing; conversion of wrapper class to primitive data type, E.g:

        if(a=='a'){
            System.out.println("a is equal to @");
        }


