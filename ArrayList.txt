CHECK ALSO: LinkedLists.txt, see the differences between both there.

NB: To compare elements of an arraylist to see which is greater(integer), comes first (ie Strings), check Comparable Interface.txt


NB: 2D ArrayList section down below

We use arrays in place of arraylists because arrays perform faster.

The ArrayList is a resizeable array.

ArrayList is a java class that implements the list interface.

The difference between a built-in array and an ArrayList in Java, is that the size of an array cannot be modified (if you want to add or remove elements to/from an array, you have to create a new one). While elements can be added and removed from an ArrayList whenever you want.

NB: THERE ARE TWO WAYS OF DIFINING AN ARRAYLIST: ie;

        1- ArrayList<String> students  = new ArrayList<>(); OR (Deprecated for Java Version < 1.8) ... new ArrayList<String>();
        2- List<String> myList2 = new ArrayList<>();    "BETTER METHOD"
        3- List<String> myList3 = new ArrayList<>(List.of("John","Doe"));   // Arraylist with values.
        3- List<String> myList3 = new ArrayList<>(Arrays.asList("John","Doe"));   // Arraylist with values.

        String[] namess = {"Samuel", "Kehinde", "Thompson"};   // Arraylist from Array
        ArrayList<String> names2 = new ArrayList<>(List.of(namess));


        ArrayList<Integer> myNumber = new ArrayList<>();
        ArrayList<String> students  = new ArrayList<String>();
        students.add("Ibrahim");
        students.add("Musa");
        students.add("Suleiman");
        System.out.println(students);

        student.add(1,"Sam")        // Adds at a particular index
        students.addAll(myNumber);  // This is used to add/merge myNumber arraylist to students arraylist.
        students.addAll(3, myNumber);  

ACCESSING ELEMENTS
        System.out.println("The first item in the arraylist is: " + students.get(0));


REPLACING ELEMENTS

        ArrayList<String> list = new ArrayList<>();
        list.add("One");
        list.add("2");
        list.add("Three");

        System.out.println("List: " + list);
        list.set(1, "Two");
        System.out.println("Replaced list: " + list);


CHECK IF ITEM IN ARRAYLIST
        boolean containsValue = myList1.contains("Ibrahim");	

CHECK IF ARRAYLIST IS EMPTY
        boolean emptyOrNot = myList1.isEmpty();

CHANGE ITEM AT A PARTICULAR INDEX
        students.set(1, "Muhammed");
        System.out.println(students);

REMOVE ITEM
        students.remove(2);			//REMOVE BY INDEX
	students.remove("Musa");		//REMOVE BY ITEM NAME
        System.out.println(students);

REMOVE ALL ITEMS
        students.clear();
        System.out.println(students);

ARRAY SIZE (length)
        System.out.println(students.size());	//3

GET INDEX OF ITEM
        int indexOfItem = myList1.indexOf("Ibrahim"); \\Else returns -1


COMPARE ELEMENTS WITHIN AN ARRAYLIST
	  CHECK: Comparable Interface.txt

================================ LOOPING THROUGH AN ARRAYLIST ====================================

LOOP THROUGH AN ARRAYLIST USING FOR LOOP
        for(int i=0; i<students.size(); i++){
            System.out.println(i + " " + students.get(i));

LOOP THROUGH AN ARRAYLIST USING FOR-EACH LOOP
        for (String i: students){
            System.out.println(i);
        }

LOOP THROUGH AN ARRAYLIST USING ITERATOR INTERFACE

        ArrayList<String> list = new ArrayList<>(Arrays.asList("One","Two","Three","Four"));
        
        Iterator<String> iterator = list.iterator();
        while (iterator.hasNext()){
            System.out.println(iterator.next());
        }

NB: Iterable is also what allows the use of for each loop, which can be used in the above.
=============================================== 2D ARRAYLIST ======================================
2D Arraylist is a dynamic list of lists. It's a list of separate lists.

        ArrayList<String> lists1 = new ArrayList<>();
        lists1.add("Item 1");
        lists1.add("Item 2");
        lists1.add("Item 3");        
        System.out.println(lists1);
        
        ArrayList<String> lists2 = new ArrayList<>();
        lists2.add("Object 1");
        lists2.add("Object 2");
        lists2.add("Object 3");
        System.out.println(lists2);
        
        ArrayList<String> lists3 = new ArrayList<>();
        lists3.add("list 1");
        lists3.add("list 2");
        System.out.println(lists3);
        
       
        ArrayList<ArrayList<String>> allLists = new ArrayList<>(); 
        allLists.add(lists1);
        allLists.add(lists2);
        allLists.add(lists3);
        
        System.out.println(allLists);

	OUTPUT:	
	[Item 1, Item 2, Item 3]
	[Object 1, Object 2, Object 3]
	[list 1, list 2]
	[[Item 1, Item 2, Item 3], [Object 1, Object 2, Object 3], [list 1, list 2]]

	
ACCESSING ELEMENTS IN A 2D ARRAYLIST
        System.out.println(allLists.get(0).get(1));




