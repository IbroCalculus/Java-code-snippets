
CHECK ALSO; Nested Class

Create new Java Class i.e TestClass

public class TestClass {
    String fname = "Ibrahim";
}


CREATE an object of the class in main

        TestClass testClassObj = new TestClass();
        System.out.println(testClassObj.fname);


MULTIPLE objects are allowed:

        TestClass testClassObj = new TestClass();
        TestClass testClassObj1 = new TestClass();
        TestClass testClassObj2 = new TestClass();
        System.out.println(testClassObj1.fname);
        System.out.println(testClassObj2.fname);


MAY CREATE MULTIPLE CLASSES AS YOU NEED



========== CONSTRUCTOR ================
NB: Constructor does not have a return type. ie always return void

public class Lion {

    public Lion(){
        System.out.println("This is the primary constructor");
    }
    public Lion(String name){
        System.out.println("Constructor overloading with passed parameter: " + name);
    }
}

        Lion h1 = new Lion();
        Lion h2 = new Lion("Baby Lion");

 ------ Calling a constructor from within another constructor ----------

    public Lion(){
        this("Lion 1", 23, false);
    }

    public Lion(String name, int age, boolean isMale) {
    }


JAVA class attributes
class attributes are variables within a class: i.e: fname. or functions within a class known as methods

Another name for class attributes is fields.

Access atributes as shown above. i.e: obj.attribute

Attributes withing a class can be modified. i.e myObj.x = "Modified text", hence overrid the value of variable x.

To disable overried of variable, declare as final. E.g final String x = "Text"



CLASS METHODS

public class TestClass {
    String fname = "Ibrahim Suleiman";
    
    static void greet(){
        System.out.println("Hello to you");
    }
    
    static void msg(String fname){
        System.out.println("Welcome Mr " + fname);
    }
}

public class Test {
    public static void main(String[] args) {
        TestClass testClassObj = new TestClass();
        System.out.println(testClassObj.fname);
        testClassObj.greet();
        testClassObj.msg("Ib");
    }

}

PUBLIC VS STATIC METHODS IN CLASSES

By STATIC, you can call the function directly without declaring an object.

E.g:
public class TestClass {
    
    static void greet(){
        System.out.println("Hello to you");
    }
}

public class Test {
    public static void main(String[] args) {
        TestClass.greet();
    }

By PUBLIC, you must create an object of the class and call the function as a method.  can only be accessed by objects
E.g:
public class TestClass {
    
    public void greet(){
        System.out.println("Hello to you");
    }

public class Test {
    public static void main(String[] args) {
        
        TestClass testClassObj = new TestClass();
        testClassObj.greet();
        
    }
