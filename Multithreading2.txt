CHECK: Thread.txt for Synchronization

NB: .start() runs the thread asynchronously, while .run() runs the thread synchronously by the running thread it is invoked from
NB: To get reference of main thread; 
        Thread mainThread = Thread.currentThread();

==================== TERMINATING A THREAD ============================
A thread will terminate either implicitly or explicitly.

1- Implicitly: When it reaches the end of the run method
2- Explicitly: When it executes a return statement.


======================= INTERRUPT ========================
We interrupt a thread when we want to stop what it is doing, and do something else.
ie thread 1 is in sleep for 10 seconds, but due to some reason, thread 2 may wake thread 1 to action before the 10 seconds elapses.

They are 2 ways for a thread to notice it has been interrupted. 
1- Catch the InterruptedException
2- It should call the interrupted method periodically to check whether it has been interrupted.
   That method will return a boolean to indicate if anothe method has interrupted it.


================== Example 1: Using the InterruptedException (You need a thread instance, ie named Thread class, 'anotheThread' in this case ==================

The thread 'AnotherThread' will be terminated by the main thread after 3 seconds.

---- AnotherThread class -------

public class AnotherThread extends Thread{
    @Override
    public void run() {
        
        for(int i=0; i<=10; i++){
            System.out.println(" another thread: " + i);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println("This thread has been terminated by the main thread after 3 seconds!");
                return;
            }
        }
    }
}


---- On the main class ------

        Thread anotherThread = new AnotherThread();
        anotherThread.start();

        try {
            Thread.sleep(3000);
            anotherThread.interrupt();

        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }



=========== .JOIN() method ================
2 threads instances, 'thread1' created in a new class 'Thread1', and 'thread2', an instance of 'Thread' created in the main class. NB: thread2 can be an anonymous class.
Interrupt 'thread2' while 'thread1' proceed to the end.

NB: We can pass time in milliseconds to the .join() method. ie it will end the .join after the time passed has elapsed, even if the other thread has not finished executing.

------ Thread1 class -----

public class Thread1 extends Thread{
    @Override
    public void run() {
        for(int j=0; j<=10; j++){
            System.out.println("First thread, iteration: " + j);
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                System.out.println("This Thread.sleep has been interrupted!");   // This did not show in the output when run
            }
        }
    }
}


------ Main Class -----

    public static void main(String[] args) {

        Thread thread1 = new Thread1();
        thread1.start();

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=0; i<=10; i++){
                    System.out.println("Second Thread, iteration: " + i);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        System.out.println("This Thread.sleep has been interrupted!");
                    }
                    if(i==5){
                        try {
                            thread1.join();  					// Let thread1 proceed to finish, while this thread; thread2 is on hold
                            // thread1.join(3000);  					// After 3 seconds, thread2 will proceed even if thread1 has not finished executing.
                        } catch (InterruptedException e) {
                            System.out.println("This thread interrupted!");
                        }
                    }
                }
            }
        });
        thread2.start();
    }


======== Race condition =======
This is a situation where multiple threads try to update a mutually shared resource (data) at the same time. Synchronization prevents that.

============================================== SYNCHRONIZATION ==============================================

Threads share the same memory space, i.e. they can share resources (objects).
However, there are critical situations where it is desirable that only one thread at a time has access to a shared resource.

Synchronization in Java multithreading refers to the coordination and control of access to shared resources to avoid data inconsistencies and race conditions when multiple threads are concurrently executing. In a multithreaded environment, where multiple threads can access and modify shared data, synchronization mechanisms are essential to ensure the orderly execution of the program and prevent issues like data corruption or unexpected behavior.


=== TERMS ASSOCIATED WITH SYNCHRONISATION ====
-1. Resource sharing: Accessing same data by multiple threads from. The data shared is known as a shared object or shared resource.

-2. Critical section: Particular lines of codes from multiple threads that are accessing the shared resource

-3. Mutual Exclusion: Only one thread can execute a block of code at a given time, or do updates on shared data. This is achieved via synchronization.

 --- methods used to achieve Mutual Exclusion ---
-4. Locking/Mutex: 
-5. Semaphore:
-6. Monitor (most recommended):
-7. Race condition:
-8. Inter-Thread communication:


======== Volatile keyword ========
This keyword can only be used in field declarations. Volatile variables are never cached and are read directly from the memory.
    The volatile keyword ensures visibility without mutual exclustion.

NB: Mutual Exclusion (Atomicity): This means that only one thread can execute a block of code at a given time, or do updates on shared data. This is achieved via synchronization.
NB: Visibility: This means that changes done by one thread to shared data are visible to other threads or processes. It is achieved using the volatile keyword.
    

    To achieve visibilty and atomicity, use the synchronize keyword.

    private static volatile int interest = 30;



=============== SYNCHRONIZATION =================

---- a. Method 1 -----------
    public void display(String str){
        synchronized (this) {
            for (int i = 0; i < str.length(); i++) {
                System.out.print(str.charAt(i));
            }
        }
    }

---- b. Method 2 -----------

    public synchronized void display(String str){
            for (int i = 0; i < str.length(); i++) {
                System.out.print(str.charAt(i));
            }        
    }

============================================== EXECUTORS ==============================================
They are capable of running asynchronous tasks and manage a pool of threads. All threads belonging to the pool wil be reused for new tasks. We can run as many concurrent tasks as we want through-out the lifecyle of our application with a single executor service. 

Executors have to be stopped explicitly, otherwise they keep listening for new tasks. They are 2 methods for such purpose;
	a. shutdown -> Waits for currently running tasks to finish
	b. shutdownNow -> Interrupts all running tasks and shuts the executor down.




