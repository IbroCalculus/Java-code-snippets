These contains examples:


=========== Example of Race conditions ================

public class Counter {
    private int count = 0;

    public void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}


*** Now imagine two threads doing this:

Counter counter = new Counter();

Thread t1 = new Thread(() -> {
    for (int i = 0; i < 1000; i++) {
        counter.increment();
    }
});

Thread t2 = new Thread(() -> {
    for (int i = 0; i < 1000; i++) {
        counter.increment();
    }
});

t1.start();
t2.start();

t1.join();
t2.join();

System.out.println(counter.getCount()); // Expected: 2000, Actual: Could be less!

Why? Because count++ is not atomic . It involves: Read count, Increment, Write back
If two threads do this at the same time, one update can be lost .

Fix:
Use synchronized methods or AtomicInteger.


***** FIX USING SYNCHRONIZED *****
The synchronized keyword in Java ensures that only one thread can execute a method or block at a time on the same object. 
It provides mutual exclusion (mutex), so only one thread can be inside the method at once.

public class Counter {
    private int count = 0;

    public synchronized void increment() {			// synchronized
        count++;
    }

    public int getCount() {
        return count;
    }
}


How It Works
 - When a thread enters the increment() method, it acquires a lock on the Counter object.
 - While one thread is inside increment(), no other thread can enter it.
 - When the thread finishes, it releases the lock , allowing another thread to proceed.


***** FIX USING ATOMICINTEGER *****
AtomicInteger is part of the java.util.concurrent.atomic package and provides thread-safe operations on an int value without using locks. 
It uses hardware-level atomic operations (like CAS – Compare and Swap) to ensure thread safety.

public class Counter {
    private AtomicInteger count = new AtomicInteger(0);		// AtomicInteger

    public void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

How It Works
 - count.incrementAndGet() is atomic — it reads, increments, and writes back the value in a single, uninterruptible operation.
 - No locks are needed — it uses low-level CPU instructions to ensure thread safety.
 - It's non-blocking and faster than synchronized in high-concurrency scenarios.



=========== Example of Wait() and Notify() ================

class SharedResource {

    private int data;
    private boolean available = false;

    // Consumer calls this
    public synchronized int get() {
        while (!available) {
            try {
                wait();  						// Wait until producer says data is available
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Consumer interrupted");
            }
        }
        available = false;
        notify();  							// Notify producer that data has been consumed
        System.out.println("Consumed: " + data);
        return data;
    }


    // Producer calls this
    public synchronized void put(int value) {
        while (available) {
            try {
                wait();  						// Wait until consumer takes the data
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
                System.out.println("Producer interrupted");
            }
        }
        data = value;
        available = true;
        System.out.println("Produced: " + value);
        notify();  							// Notify consumer that data is available
    }

}


	---------------- main() ------------

public class Main {
    public static void main(String[] args) {

        SharedResource resource = new SharedResource();

        Thread producer = new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                resource.put(i);
            }
        });

        Thread consumer = new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                resource.get();
            }
        });

        producer.start();
        consumer.start();
    }
}

*** How It Works Step-by-Step:
	- Consumer starts and calls get(), but available is false, so it calls wait() and releases the lock .
	- Producer starts , calls put(), sets data, marks available = true, then calls notify() to wake the consumer.
	- Consumer wakes up , consumes the data, sets available = false, and notifies the producer.
	- Repeat until all items are produced and consumed.