
CHECK ALSO; SQLite2.txt
CHECK ALSO: MySQL.txt

JDBC - Java DataBase Connectivity.
DDL - Data Definition Language: It is used by database administrator to define the schema. ie; CREATE, ALTER, DROP etc
DML - Data Manipulation Language: It is used by database user to manipulate data in a database. ie; SELECT, INSERT, UPDATE, DELETE etc.

=========== The 3 execute methods ==================

1 .executeUpdate() is used to execute DML statements apart from SELECT (ie UPDATE, DELETE). It returns an integer value representing the number of rows affected.
  ie
      String insertData = "INSERT INTO Employee("
         + "Name, Salary, Location) VALUES "
         + "('Amit', 30000, 'Hyderabad'), "
         + "('Kalyan', 40000, 'Vishakhapatnam'), "
         + "('Renuka', 50000, 'Delhi'), "
         + "('Archana', 15000, 'Mumbai')";

      int i = stmt.executeUpdate(insertData);
      System.out.println("Rows inserted: "+i);

2 .executeQuery() is used to execute statements that returns tabular data (ie SELECT).  It returns an object of the class ResultSet.
  ie
      ResultSet rs = stmt.executeQuery("Select *from Employee");

      while(rs.next()) {
         System.out.print("Name: "+rs.getString("Name")+", ");
         System.out.print("Salary: "+rs.getInt("Salary")+", ");
         System.out.print("City: "+rs.getString("Location"));
         System.out.println();
      }


3 .execute() is used to execute DDL statements (ie CREATE, ALTER, DROP). it returns a boolean value specifying weather the ResultSet object can be retrieved.
  ie 
      String createTable = "CREATE TABLE Employee( "
         + "Name VARCHAR(255), "
         + "Salary INT NOT NULL, "
         + "Location VARCHAR(255))";
      boolean bool = stmt.execute(createTable);

      System.out.println(bool);


===========================================================================

Driver is used to:
 1. Establish connection between java and the database (ie SQLite, MySQL, Oracle server, etc).
 2. Enable datatype conversion between java and the database (ie Java String should convert to SQLite Text, etc).

Java has a built-in class for connection which is available in; java.sql package.


===== DRIVERS =====
If Java wants to communicate with Oracle, it will need an Oracle driver, likewise a different driver for MySQL, likewise a different one for SQLite. etc.
Likewise applies to every other programming languages, ie Python, C#, etc with different databases.

ALTHOUGH, microsoft has provided a solution to the above. Instead of different drivers for different databases, it introduced ODBC (Open Database Connectivity) driver. This is available on windows OS by default. All databases supports the ODBC driver.
In this case, Java will only need a driver for ODBC, not for each databases.

Java supports 4 different types of drivers, ie;
1. Type-1
   JDBC-OBDC Bridge (partial)  // Discussed above.

2. Type-2
   Native-API (partial):	ie The programming language is Java, the database (ie MySQL)  is written in its native language (eg C language). To communicate between the program and the database, we use a bridge/an interface related to the Database, eg OCI (Oracle Call Interface).

We use the Type-2 for Java and SQLite.

3. Type-3
   Java-Net Protocol Driver(pure):	Programming language communicates via a driver with a shared server, which in turn communicates with the database.

4. Type-4
   Thin Driver (pure):	Direct connection between the programming language and the database. (Database must be of same programming language)


FOR JAVA-SQLIte Database, We use the Type-2 for Java and SQLite.


===========================================================================================================
============================================= JAVA - SQLite ===============================================
===========================================================================================================
- Download jdbc sqlite driver jar file from mvn repository website (https://mvnrepository.com/artifact/org.xerial/sqlite-jdbc).
- Copy the sqlite-jdbc-3.41.0.0.jar file to the folder C:\Program Files\Java	(Not compulsory, the folder can be anywhere).


========= WITHIN JAVA CODE =================
For every project that deals with JDBS, add the .jar file as a library;
(InteliJ; File -> Project Structure -> libraries -> + Java -> sqlite-jdbc-3.41.0.0.jar (located C:\Program Files\Java\sqlite-jdbc-3.41.0.0.jar)


NB: In javaFx project, go to; src -> main -> java -> module-info.java:

module com.example.cardealership {
    requires javafx.controls;
    requires javafx.fxml;
    
    requires java.sql;						// ADD THIS LINE

    opens com.example.cardealership to javafx.fxml;
    exports com.example.cardealership;
}

----------------- WORKING WITH DATABASE ------------------
Create a class to handle all database operations, ie SQLConnection.java in this case


import java.sql.*;

public class SQLConnection {

    static Connection conn;
    static Statement statement;
    static ResultSet resultSet;
    static PreparedStatement preparedStatement;
    static String dbName = "univ.db";

//    ---------- ESTABLISHING CONNECTION ----------------
    public static boolean establishConnect() {
        try {
            conn = DriverManager.getConnection("jdbc:sqlite:" + dbName);
            if (conn != null) {
                statement = conn.createStatement();
                System.out.println("Connection successful!");
                return true;
            } else {
                System.out.println("Error connecting!");
                return false;
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    //    ---------- CLOSING CONNECTION ----------------
    public static void closeConnection() {
        try {
            if (resultSet != null) {
                resultSet.close();
            }
            if (statement != null) {
                statement.close();
            }
            if (conn != null) {
                conn.close();
            }
            System.out.println("Connection closed.");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    //    ---------- CREATING TABLES ----------------
    public static void createTable() {
        try {
            statement.execute("CREATE TABLE IF NOT EXISTS dept (deptno INT PRIMARY KEY, dname TEXT)");
            System.out.println("Table created or already exists.");
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    //    ---------- READING DATA FROM DATABASE ----------------
    public static void readDatabase() {
        try {
            resultSet = statement.executeQuery("SELECT * FROM dept");
            while (resultSet.next()){
                int deptno = resultSet.getInt("deptno");
                String dname = resultSet.getString("dname");

                System.out.println("DEPT NO.: " + deptno + ", DEPT NAME: " + dname);
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    //    ---------- INSERTING DATA INTO TABLES ----------------
    public static boolean insertData(int deptno, String dname) {
    try {
        String query = "INSERT INTO dept (deptno, dname) VALUES (?, ?)";
        preparedStatement = conn.prepareStatement(query);
        preparedStatement.setInt(1, deptno);
        preparedStatement.setString(2, dname);
        int rowsInserted = preparedStatement.executeUpdate();
        preparedStatement.close();
        
        if (rowsInserted > 0) {
            System.out.println("Data inserted successfully!");
            return true; // Data was inserted successfully
        } else {
            System.out.println("No data inserted.");
            return false; // No data was inserted
        }
    } catch (SQLException e) {
        throw new RuntimeException(e);
    }
}



    //    ---------- UPDATING DATA INTO A DATABASE ----------------
    public static boolean updateData(int deptno, String newDname) {
        try {
            String query = "UPDATE dept SET dname = ? WHERE deptno = ?";
            preparedStatement = conn.prepareStatement(query);
            preparedStatement.setString(1, newDname);
            preparedStatement.setInt(2, deptno);
            int rowsUpdated = preparedStatement.executeUpdate();
            preparedStatement.close();
            if (rowsUpdated > 0) {
                System.out.println("Data updated successfully!");
                return true;
            } else {
                System.out.println("No data updated.");
                return false;
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }


    //    ---------- DELETING DATA FROM A DATABASE ----------------
    public static boolean deleteData(int deptno) {
        try {
            String query = "DELETE FROM dept WHERE deptno = ?";
            preparedStatement = conn.prepareStatement(query);
            preparedStatement.setInt(1, deptno);
            int rowsDeleted = preparedStatement.executeUpdate();
            preparedStatement.close();
            if (rowsDeleted > 0) {
                System.out.println(rowsDeleted + " number of rows deleted successfully!");
                return true;
            } else {
                System.out.println("No data deleted.");
                return false;
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}

---------------------- USING THIS IN Main method -----------------------------

public class Main {
    public static void main(String[] args) {

        SQLConnection.establishConnect();
        SQLConnection.readDatabase();
        SQLConnection.closeConnection();

    }
}


===================== JDBC classes and statements ==========
- DriverManager (class): This is used to establish connection between the Java program and the database by utitlizing the driver already invoked by Class.forName(...);



