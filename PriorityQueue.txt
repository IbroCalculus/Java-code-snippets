Priority Queue is a FIFO data structure that serves elements with the highest priorities first before elements with lower priority.

========= 1. LinkedList =========

        Queue<Double> queue = new LinkedList<>();

        queue.offer(3.0);
        queue.offer(2.5);
        queue.offer(4.0);
        queue.offer(1.5);
        queue.offer(2.0);

        while (!queue.isEmpty()){
            System.out.print(queue.poll() + " ");  //OUTPUT: 3.0 2.5 4.0 1.5 2.0
        }


========= 2. PrioriryQueues =========

        Queue<Double> queue = new PriorityQueue<>();

        queue.offer(3.0);
        queue.offer(2.5);
        queue.offer(4.0);
        queue.offer(1.5);
        queue.offer(2.0);

        while (!queue.isEmpty()){
            System.out.print(queue.poll() + " ");  //OUTPUT: 1.5 2.0 2.5 3.0 4.0  IN ASCENDING ORDER
        }

      ------ To get in descending order ----
        Queue<Double> queue = new PriorityQueue<>(Collections.reverseOrder());

        queue.offer(3.0);
        queue.offer(2.5);
        queue.offer(4.0);
        queue.offer(1.5);
        queue.offer(2.0);

        while (!queue.isEmpty()){
            System.out.print(queue.poll() + " ");  //OUTPUT: 4.0 3.0 2.5 2.0 1.5
        }


        ------------ String datatype ---------------

        Queue<String> queue = new PriorityQueue<>();

        queue.offer("B");
        queue.offer("C");
        queue.offer("A");
        queue.offer("F");
        queue.offer("D");

        while (!queue.isEmpty()){
            System.out.print(queue.poll() + " ");  //OUTPUT: A B C D F
        }

      ------ To get in descending order ----
        Queue<String> queue = new PriorityQueue<>(Collections.reverseOrder());

        queue.offer("B");
        queue.offer("C");
        queue.offer("A");
        queue.offer("F");
        queue.offer("D");

        while (!queue.isEmpty()){
            System.out.print(queue.poll() + " ");  //OUTPUT: F D C B A
        }

