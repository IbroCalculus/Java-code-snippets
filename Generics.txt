Generics enable types (classes and interfaces) to be parameters when defining classes, interfaces and methods.

Much like the more familiar format parameters used in method declarations, type parameters provide a way for you to re-use the same code with different inputs. The difference is that the inputs to formal parameters are values, while the inputs to type parameters are types.

Generics can be applied in 4 ways;
 - Generic Constructor, Method, Class and Interface.

Code that uses generics has many benefits over non-generic code, ie:
- Stronger type checks at compile time.
- Elimination of casts.
- Type safety (e.g String will show error if it is used in place of Integer)


The generic in java is implemented using the angular bracked '<>' symbol and the type parameter is defined in the bracket.
The following are the standard type parameters;

- T: Type
- E: Element
- N: Number
- K: Key
- V: Value

====================================== GENERIC METHOD ==========================================
 
------------------------------------------ Method return void ------------------------------------
E.g 1:
  // Pass in any datatype
        Welcome(45);
        Welcome("Somebody");
        Welcome('C');

    public static <T> void Welcome(T t){		// Place <T> before the return type. In this case, before 'void'.
        System.out.println("Welcome " + t);
    }

	------------------------------------
E.g 2:
        id("Ibrahim", 34);
        id("Ibrahim", "Suleiman");
        id(123,456);

    public static <T1, T2> void id(T1 t1, T2 t2){
        System.out.println("ValA: " + t1 + " ValB: " + t2);
    }

	------------------------------------
E.g 3:
        addOrConcatenate(12,45);				// OUTPUT: The sum of 12 and 45 = 57
        addOrConcatenate("Ibrahim ", "Suleiman" );	// OUTPUT: The concatenated value is: Ibrahim  Suleiman

    private static <T1,T2> void addOrConcatenate(T1 t1, T2 t2) {
        if((((Object) t1).getClass().getSimpleName()).equals("Integer") && (((Object) t1).getClass().getSimpleName()).equals("Integer")){
            String t1s = String.valueOf(t1);
            String t2s = String.valueOf(t2);
            int sum = Integer.valueOf(t1s) + Integer.valueOf(t2s);
            System.out.println("The sum of " + t1 + " and " + t2 + " = " + sum);
        }else if((((Object) t1).getClass().getSimpleName()).equals("String") && (((Object) t1).getClass().getSimpleName()).equals("String")){
            System.out.println("The concatenated value is: " + t1 + " " + t2);
        }
    }

     ------ OR --------
    private static <T1,T2> void addOrConcatenate(T1 t1, T2 t2) {
        if (t1 instanceof Integer && t2 instanceof Integer){
            String t1s = String.valueOf(t1);
            String t2s = String.valueOf(t2);
            int sum = Integer.valueOf(t1s) + Integer.valueOf(t2s);
            System.out.println("The sum of " + t1 + " and " + t2 + " = " + sum);
        }else if(t1 instanceof String && t2 instanceof String){
            System.out.println("The concatenated value is: " + t1 + " " + t2);
        }
    }

======================================= GENERIC CLASS ========================================

--- WITHOUT GENERICS ---

public class GenericsClass {
    private Object t;

    public Object getT() {
        return t;
    }

    public void setT(Object t) {
        this.t = t;
    }
}

   -- Main ---
     GenericsClass genericsClass = new GenericsClass();
     genericsClass.setT("Passing a String");

     String s = (String) genericsClass.getT();  //Requires cast
     int t = (int) genericsClass.getT();        // This cast will return compile time error. Cast this String to integer not possible


--- WITH GENERICS (e.g 1) ---

public class GenericsClass<T> {
    private T t;

    public T getT() {
        return t;
    }

    public void setT(T t) {
        this.t = t;
    }
}

   -- Main ---
        GenericsClass<Integer> gc = new GenericsClass();
        gc.setT(455);
        System.out.println(gc.getT());

        GenericsClass<String> gc2 = new GenericsClass();
        gc2.setT("Some random text");
        System.out.println(gc2.getT());





--- WITH GENERICS (e.g 2) ---

public class CarInfo<ID, MODEL>{
    private ID id;
    private MODEL model;

    public ID getId() {
        return id;
    }

    public void setId(ID id) {
        this.id = id;
    }

    public MODEL getModel() {
        return model;
    }

    public void setModel(MODEL model) {
        this.model = model;
    }
}

   -- Main ---
        CarInfo<String, String> carInfo = new CarInfo<>();
        carInfo.setId("CM-435");
        carInfo.setModel("MN-34654");

        CarInfo<Integer, Integer> carInfo2 = new CarInfo<>();
        carInfo2.setId(1221);
        carInfo2.setModel(9893443);



===================================== GENERIC INTERFACE ===========================================

public interface GenericsClass<T> {
    public void printMsg(T t);
}


public class GenericsChild implements GenericsInterface{
    @Override
    public void printMsg(Object o) {
        System.out.println(o);
    }
}

    public static void main(String[] args) {
        GenericsChild gc = new GenericsChild();
        gc.printMsg("Hello word");
        gc.printMsg(234);
        gc.printMsg('C');
    }



=========================== BOUNDED TYPES =========================
With this, you can create the objects of a generic class to have data of specific derived types. E.g; Numbers (This can allow only numbers, ie ints, doubles, floats etc)

------------------------------------------------------

public class MyGenericClass <T1 extends Number, T2>{
    T1 t1;
    T2 t2;

    public MyGenericClass(T1 t1, T2 t2) {
        this.t1 = t1;
        this.t2 = t2;
    }

    public T1 getT1() {
        return t1;
    }

    public void setT1(T1 t1) {
        this.t1 = t1;
    }

    public T2 getT2() {
        return t2;
    }

    public void setT2(T2 t2) {
        this.t2 = t2;
    }
}

-------------------------------------------------------
        MyGenericClass<Integer, String> mg1 = new MyGenericClass(765,"Presently!");
        MyGenericClass<Float, String> mg2 = new MyGenericClass(76.05,"Sample String");

        System.out.println(mg1.t1);
        System.out.println(mg1.getT2());





