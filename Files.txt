CHECK ALSO: Directory.txt, Reader.txt


NB: To reference an absolute path, use double back slashes (\\) instead of a single back slash OR a single forward slash
    E.g C:\\Users\\isuleiman\\IdeaProjects\\JavaPractice1
    E.g C:/Users/isuleiman/IdeaProjects/JavaPractice1

import java.io.File;
        
        File myFile = new File("myNewFile.txt");

USEFUL methods in the File class

METHOD			TYPE			DESCRIPTION

canRead()		Boolean			Tests whether the file is readable or not
canWrite()		Boolean			Tests whether the file is writable or not
createNewFile()	Boolean			Creates an empty file
delete()		Boolean			Deletes a file
exists()		Boolean			Tests whether the file exists
isFile()		Booleean		Returns false if it's a folder or anything else not file.
getName()		String			Returns the name of the file (without the extension)
getPath()		String			Returns the name of the file (with extension)
getAbsolutePath()	String			Returns the absolute pathname of the file
length()		Long			Returns the size of the file in bytes
list()			String[]		Returns an array of the files in the directory
mkdir()			Boolean			Creates a directory


=========== CREATE NEW FILE ====================


        File myFile = new File("myFile.txt");			//File myFile = new File("C:\\Users\\MyName\\myNewFile.txt");
        if(!myFile.exists()){
            try {
                myFile.createNewFile();
                System.out.println("File created successfully");
            } catch (IOException e) {
                System.out.println("Could not create file!");
                e.printStackTrace();
            }
        }else{
            System.out.println("File already exists");
        }

ALSO,
==================

	File myObj = new File("myNewFile.txt");
        if (myObj.exists())					//Checks if file 'myNewFile.txt' exists
        {
        System.out.println("File name: " + myObj.getName());
        System.out.println("Absolute path: " + myObj.getAbsolutePath());
        System.out.println("Writeable: " + myObj.canWrite());
        System.out.println("Readable " + myObj.canRead());
        System.out.println("File size in bytes " + myObj.length());

        System.out.println("File name: " + myFileObj.getName());
        System.out.println("Get path: " + myFileObj.getPath());
        System.out.println("Parent: " + myFileObj.getParent());
        System.out.println("Exists?: " + myFileObj.exists());
        System.out.println("Is file a directory?: " + myFileObj.isDirectory());
        System.out.println("Is file a file?: " + myFileObj.isFile());
        
        } else
        {
            System.out.println("The file does not exist.");
        }


========= WRITE TO A FILE ===================
try
        {
            FileWriter myFileWriter = new FileWriter("myNewFile.txt");
            myFileWriter.write("This is a test file text");
	      myFileWriter.append("This is an appended text");
            myFileWriter.close();
            System.out.println("File written into successfully");
        }catch (IOException e)
        {
            System.out.println("An error occurred");
            e.printStackTrace();
        }


=========== READ A FILE ======================
FileReader reads the contents of a file as a stream of characters, one by one.
.read() returns an int value which contains the byte value of the particular single character.
when .read() returns -1, there is no more data to be read.

        try {
            FileReader reader = new FileReader("myNewFile.txt");
            int data = reader.read();
            while (data != -1){
                System.out.print((char)data);
                data = reader.read();
            }
            reader.close();

        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
ALSO:

try{
        File myFileObj = new File("myNewFile.txt");
        Scanner myFileReader = new Scanner(myFileObj);
        while(myFileReader.hasNextLine())
        {
            String data = myFileReader.nextLine();
            System.out.println(data);
        }
        myFileReader.close();
        }
        catch(FileNotFoundException e)
        {
            System.out.println("An error occured");
            e.printStackTrace();
        }


=========== DELETE FILE =================
        myFile.delete();
        System.out.println("File deleted!");

Note:
 There are many available classes in the Java API that can be used to read and write files in Java: FileReader, BufferedReader, Files, Scanner, FileInputStream, FileWriter, BufferedWriter, FileOutputStream, etc. Which one to use depends on the Java version you're working with and whether you need to read bytes or characters, and the size of the file/lines etc.