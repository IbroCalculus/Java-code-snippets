CHECK ALSO: Thread.txt
CHECK ALSO: Thread.txt for Synchronization

NB: To get reference of main thread; 
        Thread mainThread = Thread.currentThread();

==== Process =======
A process is an independent program running in memory. 
Each process has its own address space, memory, and system resources.
Example: Running VS Code, Chrome, and Spotify â€” each is its own process.


==== Thread =======
A thread is the smallest unit of execution within a process.
All threads in a process share: The same memory, The same open files, The same global variables.
Threads allow parallel tasks within the same program.
Example: A browser has multiple tabs running as threads within a single process.

Each process has at least one thread, called the main thread. We can create additional threads.


=== Multiprogramming ===
 Multiprogramming is a term associated with multithreading.
 Multiprogramming is running multiple programs on a single computer

--- Forms of multiprogramming ---
1. Muti-user: Where more than one user will be using and running their individual programs simultaneously on the same machine.
2. Multi-tasking: A single user running multiple programs on the same machine simultaneously.
   --- A form of multi-tasking is multi-threading:
     Multithreading is a type of multi-tasking. It is when multiple operations are running in a particular single application or program.
     E.g: A single webpage having more than one operations running on the same page



========== THREAD STATES ==================
BLOCKED, NEW, RUNNABLE, TERMINATED, TIMED_WAITING, WAITING


========== THREAD PRIORITY ==================
Thread priority is how much priority that is given to a given thread
The max value for priority is 10, min value is 1. Priority is in direct proportion to how much CPU dedication to a thread.
- Thread.MIN_PRIORIRY = 1
- Thread.NORM_PRIORIRY = 5
- Thread.MAX_PRIORIRY = 10


======= THREAD CLASSES ==============
  ---- Constructors ----
- Thread()  // Similar to Thread(String nameOfThread)    //Used this above in creating thread using the Thread class
- Thread(Runnable r)                                     //Used this above in creating thread by implementing the runnable interface
- Thread(Runnable r, String nameOfThread)
- Thread(ThreadGroup g, String nameOfThread)             //Can create a threadgroup to group some number of threads.
	


====== THREAD METHODS (getter, setters and enquiry methods) =======

--- Getter methods ---
- long getId()
- String getName()
- int getPriority()
- ThreadState getState() 
- ThreadGroup getThreadGroup()

      --------- EXAMPLES ------------
      thread1.getId()
      thread1.getName()
      thread1.getPriority()
      thread1.getState()


--- Setter methods ---
- void setName(String threadName)
- void setPriority(int priorityValue)
- void setDaemon(boolean d)

--- Enquiry methods ---
- boolean isAlive()    E.g thread1.isAlive()
- boolean isDaemon()
- boolean isInterrupted() (e.g: interrupt a thread from waiting, sleeping etc Either by itself or another thread)


--- Instance methods ---
- void interrupt()
- void join()
- void join(long millis)
- void run()
- void start()


--- Static methods ---
- int activeCount()
- Thread currentThread()  // Reference to the current thread
- void yield()            // Give chance to a lower priority thread to catch up with a higher priority thread. ie Thread.yield()
- void dumpStack()        // Stack of an application. Which methods call which other methods and how the thread is called.



