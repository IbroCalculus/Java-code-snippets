Assuming a class called superUser that accepts two values in its constructor, username, and id_number;

========== 1. WITH SINGLETON ===============

---- 1. The SuperUser class ----

public class SuperUser1 {
    private String username;
    private int id_number;

    public SuperUser1(String username, int id_number) {
        this.username = username;
        this.id_number = id_number;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public int getId_number() {
        return id_number;
    }

    public void setId_number(int id_number) {
        this.id_number = id_number;
    }
}

---- 2. In Main -------

        SuperUser1 superUser1 = new SuperUser1("root", 1234);
        SuperUser1 superUser11 = new SuperUser1("admin", 6543);

        System.out.println(superUser1);		//OUTPUT: SuperUser1@119d7047
        System.out.println(superUser11);	//OUTPUT: SuperUser1@776ec8df		Different/multiple instance of the class can be created.


========== 2. WITH SINGLETON ===============

---- 1. The SuperUser class ----

public class SuperUser {
    private String username;
    private int id_number;
    public static SuperUser instance;

    // Generate the private constructor and getters below before generating this (if constructor takes parameters). Not compulsory though, just a hint for myself.
    // NB: Without the synchronized keyword, multiple instances can be created in different threads. It will make the getInstance method thread-safe.

    public static synchronized SuperUser getInstance(String username, int id_number) {
        if(instance == null){
            instance = new SuperUser(username, id_number);
            return instance;
        }
        return instance;
    }

    private SuperUser(String username, int id_number) {
        this.username = username;
        this.id_number = id_number;
    }

    public String getUsername() {
        return username;
    }

    public int getId_number() {
        return id_number;
    }
}

---- 2. In Main -------

        SuperUser superUser = SuperUser.getInstance("Ibrahim", 123499);
        SuperUser superUser1 = SuperUser.getInstance("Admin",56556);

        System.out.println(superUser);		//OUTPUT: SuperUser1@119d7047
        System.out.println(superUser1);		//OUTPUT: SuperUser1@119d7047		Different/multiple instance of the class CANNOT be created. All thesame