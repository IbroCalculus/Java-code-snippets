* [abc]		- A single character of: a, b or c
* [a-z] 	- A single character in a ranger: a to z
* a|b		- Match either a or b
* \d		- A digit: [0 - 9]
* \w		- A word character: [a-zA-Z_0-9]
* .		- Any single character
* a{3}		- Exactly 3 of a: aaa
* a{3,}		- 3 or more of a
* a{2,4}	- between 2 or 4 of a: aa, aaa or aaaa
* ^		- The beginning of a line
* $		- The end of a line
* *		- Matches zero or more occurrences
* +		- Matches one or more occurrences
* ?		- Matches zero or one occurrence.


====================================================

--- 1. ie; Starts with any 3 characters, then xx in between, and ends with any single value ---

//        Pattern pattern = Pattern.compile("...XX.");
        Pattern pattern = Pattern.compile("...XX.",Pattern.CASE_INSENSITIVE);    // Make pattern Case-insensitive
        Matcher matcher = pattern.matcher("abcXXw");     // Returns a boolean if pattern matches input string or not


        boolean matchResult1 = matcher.matches();
        boolean matchResult2 = matcher.find();

        System.out.println("Match1: " + matchResult1);
        System.out.println("Match2: " + matchResult2);



-------------------- E.g (Nigeria phone number regex) --------------------------------------

        Scanner input = new Scanner(System.in);
        System.out.println("Enter your phone number");
        String phoneNumber = input.nextLine();

        String phoneNumberRegex = "(\\+234|0)([789]\\d{9})";
        Pattern pattern = Pattern.compile(phoneNumberRegex);
        Matcher matcher = pattern.matcher(phoneNumber);

        String regexResult = matcher.matches() ? "Valid phone number" : "INVALID Nigeria phone number" ;
        System.out.println(regexResult);

