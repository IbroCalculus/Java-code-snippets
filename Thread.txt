CHECK ALSO: Multithreading.txt


NB: To get reference of main thread; 
        Thread mainThread = Thread.currentThread();
NB: .start() runs the thread asynchronously, while .run() runs the thread synchronously by the running thread it is invoked from
NB: There are 2 different kinds of threads: Daemon threads and user threads(Non-Daemon thread)

When a JVM starts up, there is a thread which calls the main method, this thread is called "main"

Daemon thread is a low priority thread that runs in background to perform tasks such as garbage collection
JVM terminates itself when all user threads (non-daemon threads) finish their execution.



============ SHOW NUMBER OF THREADS RUNNING ============
        int activeThreadCount = Thread.activeCount();
        System.out.println("Number of active threads: " + activeThreadCount);	

	//NB: for any number of thread running, count will be +1, ie + daemon thread (Runs the gabbage collector, which removes unused objects from memory)

============ SHOW TOTAL NUMBER OF AVAILABLE THREADS (It will depend on computer being used) ============
        System.out.println("Number of threads available: " + Runtime.getRuntime().availableProcessors());

========== SHOW NAME OF CURRENT THREADS ===========
        System.out.println(Thread.currentThread().getName());

========= RENAME THREAD ====================
        Thread.currentThread().setName("Thread New Name");

========== GET THREAD PRIORITY =============
        System.out.println(Thread.currentThread().getPriority());	\\Scale of 1-10. scale is directly proportional to priority

========== SET THREAD PRIORITY =============
        Thread.currentThread().setPriority(9);				\\Scale of 1-10. scale is directly proportional to priority

========== CHECK IF THREAD IS ALIVE =============
        System.out.println(Thread.currentThread().isAlive());

=========== CHECK IF THREAD DAEMON ================
        System.out.println(newThread1.isDaemon());

=========== Count active threads ===========
        int activeThreadCount = Thread.activeCount();
        System.out.println("Number of active threads: " + activeThreadCount);	//NB: for any number of thread running, count will be +1, ie + daemon thread

=========== SET THREAD TO DAEMON ================
        NewThread1 newThread1 = new NewThread1();
        newThread1.setDaemon(true);

========= SLEEP THREAD (like pause the thread)	===========
            Thread.sleep(1000);				//milliseconds


================= MULTI-THREADING =========
There are 3 methods to doing this. I find method 3 Best, easiest.

------- Method 1 - Create a class for the thread and extends Thread ---------------

public class NewThread1 extends Thread{
    @Override
    public void run() {
        System.out.println("NewThread1 has been created successfully!");
    }
}

-------	IN MAIN CLASS: 

        NewThread1 newThread1 = new NewThread1();
        System.out.println(newThread1.isAlive());   //Returns false, unless thread is started.
        newThread1.start();
        System.out.println(newThread1.isAlive());   //Returns true;
        System.out.printf("The name of this thread is: %s\n", newThread1.getName());


------ Method 2: Create a new class and implement Runnable ----------

public class MyRunnable implements Runnable{
    @Override
    public void run() {

        for (int i=1; i<=10; i++){
            System.out.println(i);
            try {
                Thread.sleep(1000);				//milliseconds
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        System.out.println("ITERATION COMPLETED FOR T-2");        
    }
}

---------- IN MAIN CLASS:
        MyRunnable myRunnable = new MyRunnable();
        Thread newThread2 = new Thread(myRunnable);
        newThread2.start();


------- Method 3: (E.g below consists of 2 custom thread + the main thread) ------

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=0; i<=10; i++){
                    System.out.printf("Running loop: %d\n", i);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        Thread thread2 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int j=11; j<=20; j++){
                    System.out.printf("Runngin loop: %d\n", j);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        thread.start();
        thread2.start();

        for(int k=21; k<=30; k++){
            System.out.printf("Executing loop: %d\n", k);
            Thread.sleep(1000);
        }

===================================================================================================
------- Anonymous class --------------
Within the Main method, I created 2 anonymous threads as shown below.

    public static void main(String[] args) {
        
        new Thread(){
            @Override
            public void run() {
                for(int i=0; i<=10; i++){
                    System.out.println("Anonymous thread 1, Iteration " + i);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();

        new Thread(){
            @Override
            public void run() {
                for(int i=0; i<=10; i++){
                    System.out.println("Anonymous thread 2, Iteration " + i);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }.start();



------- anyonymous runnable class interface --------------
-------------------------------------------------------------

    public static void main(String[] args) {

        Thread myRunnable1 = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int j=0; j<=10; j++){
                    System.out.println("Anonymous runnable class interface, Iteration: " + j);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });
        myRunnable1.start();

         ----- OR SIMPLY ----

        new Thread(new Runnable() {
            @Override
            public void run() {
                for(int j=0; j<=10; j++){
                    System.out.println("Anonymous runnable class interface, Iteration: " + j);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        }).start();


============ JOIN METHOD IN THREAD =====================
This is used to join multiple threads such that other threads will not start until the other thread/threads has finished execution.
Assume we want thread3 and thread4 to begin only after thread1 and thread2 are done executing: 

thread1.start();
thread2.start();

thread1.join();
thread2.join();
thread1.join(3000);	//Delay of 300 miliseconds

thread3.start();
thread4.start();


========================== YIELD ======================
If 2 threads, Thread1 and Thread2, if we want Thread1 to give room for Thread2 to have more execution time by the CPU we yield Thread1
ie Thread1.yield(); 


========================== INTERRUPTING A THREAD ============================

        Thread thread = new Thread(new Runnable() {
            @Override
            public void run() {
                for(int i=0; i<=10; i++){
                    System.out.println("Thread 1: " + i);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException e) {

                        System.out.println("Thread 1 has been interrupted!");
                        Thread.currentThread().interrupt();
                        return;
                    }
                }
            }
        });

        thread.start();


//--- This is running on the main thread, and will interrupt the above thread ---

        for(int i=0; i<=10; i++){
            System.out.println("Main thread: " + i);
            if(i==3){
                thread.interrupt();
            }
            try {
                Thread.sleep(1000);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            }
        }

